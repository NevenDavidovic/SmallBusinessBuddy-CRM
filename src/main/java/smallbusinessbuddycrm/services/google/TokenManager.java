package smallbusinessbuddycrm.services.google;

import smallbusinessbuddycrm.model.OAuthToken;
import smallbusinessbuddycrm.utilities.JsonUtils;

import java.io.*;
import java.util.Properties;

/**
 * Service responsible for managing OAuth tokens persistence
 */
public class TokenManager {

    private static final String CONFIG_DIR_NAME = ".smallbusinesscrm";
    private static final String TOKEN_FILE_NAME = "oauth_tokens.properties";

    /**
     * Saves OAuth tokens to local storage
     * @param token OAuth token object to save
     */
    public void saveTokens(OAuthToken token) {
        try {
            Properties props = new Properties();
            props.setProperty("access_token", token.getAccessToken() != null ? token.getAccessToken() : "");
            props.setProperty("refresh_token", token.getRefreshToken() != null ? token.getRefreshToken() : "");
            props.setProperty("user_email", token.getUserEmail() != null ? token.getUserEmail() : "");
            props.setProperty("user_name", token.getUserName() != null ? token.getUserName() : "");
            props.setProperty("saved_at", String.valueOf(System.currentTimeMillis()));

            File configDir = new File(System.getProperty("user.home"), CONFIG_DIR_NAME);
            configDir.mkdirs();
            File tokenFile = new File(configDir, TOKEN_FILE_NAME);

            try (FileOutputStream fos = new FileOutputStream(tokenFile)) {
                props.store(fos, "OAuth Tokens - Auto-generated by Small Business Buddy CRM");
            }

            System.out.println("‚úÖ Tokens saved successfully to: " + tokenFile.getAbsolutePath());
            System.out.println("  - Email saved: '" + token.getUserEmail() + "'");
            System.out.println("  - Name saved: '" + token.getUserName() + "'");
        } catch (Exception e) {
            System.err.println("‚ùå Failed to save tokens: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Loads saved OAuth tokens from local storage
     * @return OAuthToken object or null if no valid tokens found
     */
    public OAuthToken loadSavedTokens() {
        try {
            File configDir = new File(System.getProperty("user.home"), CONFIG_DIR_NAME);
            File tokenFile = new File(configDir, TOKEN_FILE_NAME);

            if (!tokenFile.exists()) {
                System.out.println("üìÑ No saved tokens found");
                return null;
            }

            Properties props = new Properties();
            try (FileInputStream fis = new FileInputStream(tokenFile)) {
                props.load(fis);
            }

            // Create token object from properties
            OAuthToken token = new OAuthToken(
                    props.getProperty("access_token"),
                    props.getProperty("refresh_token"),
                    props.getProperty("user_email"),
                    props.getProperty("user_name")
            );

            System.out.println("üîç Loaded from file:");
            System.out.println("  - Access Token: " + (token.getAccessToken() != null && !token.getAccessToken().isEmpty() ? "present" : "missing"));
            System.out.println("  - Refresh Token: " + (token.getRefreshToken() != null && !token.getRefreshToken().isEmpty() ? "present" : "missing"));
            System.out.println("  - User Email: '" + token.getUserEmail() + "'");
            System.out.println("  - User Name: '" + token.getUserName() + "'");

            // Validate token has minimum required data
            if (token.getAccessToken() != null && !token.getAccessToken().isEmpty()) {
                return token;
            } else {
                System.out.println("‚ùå Saved tokens are invalid or incomplete");
                clearSavedTokens();
                return null;
            }
        } catch (Exception e) {
            System.err.println("‚ùå Failed to load saved tokens: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Clears all saved tokens from local storage
     */
    public void clearSavedTokens() {
        try {
            File configDir = new File(System.getProperty("user.home"), CONFIG_DIR_NAME);
            File tokenFile = new File(configDir, TOKEN_FILE_NAME);
            if (tokenFile.exists()) {
                boolean deleted = tokenFile.delete();
                System.out.println(deleted ? "‚úÖ Saved tokens cleared" : "‚ùå Failed to delete token file");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Failed to clear saved tokens: " + e.getMessage());
        }
    }

    /**
     * Checks if saved tokens exist
     * @return true if token file exists
     */
    public boolean hasSavedTokens() {
        File configDir = new File(System.getProperty("user.home"), CONFIG_DIR_NAME);
        File tokenFile = new File(configDir, TOKEN_FILE_NAME);
        return tokenFile.exists();
    }

    /**
     * Extracts tokens from OAuth response JSON
     * @param responseBody JSON response from OAuth token endpoint
     * @return OAuthToken object or null if parsing failed
     */
    public OAuthToken parseTokenResponse(String responseBody) {
        try {
            System.out.println("üîÑ Parsing token response...");

            String accessToken = JsonUtils.extractValue(responseBody, "access_token");
            String refreshToken = JsonUtils.extractValue(responseBody, "refresh_token");

            System.out.println("üîç ACCESS TOKEN: " + (accessToken != null ? "present" : "null"));
            System.out.println("üîç REFRESH TOKEN: " + (refreshToken != null ? "present" : "null"));

            if (accessToken != null && !accessToken.isEmpty()) {
                System.out.println("‚úÖ Token parsing successful!");
                return new OAuthToken(accessToken, refreshToken, null, null);
            } else {
                System.err.println("‚ùå Failed to extract access token");
                // Try manual extraction as fallback
                return parseTokenResponseManually(responseBody);
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error parsing tokens: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Manual token extraction as fallback method
     * @param responseBody JSON response body
     * @return OAuthToken object or null if failed
     */
    private OAuthToken parseTokenResponseManually(String responseBody) {
        try {
            System.out.println("üîß Trying manual token extraction...");

            String accessStart = "\"access_token\":\"";
            int startIndex = responseBody.indexOf(accessStart);

            if (startIndex == -1) {
                accessStart = "\"access_token\": \"";
                startIndex = responseBody.indexOf(accessStart);
            }

            if (startIndex != -1) {
                startIndex += accessStart.length();
                int endIndex = responseBody.indexOf("\"", startIndex);

                if (endIndex != -1) {
                    String accessToken = responseBody.substring(startIndex, endIndex);
                    System.out.println("‚úÖ Manual extraction successful");
                    return new OAuthToken(accessToken, null, null, null);
                }
            }

            System.err.println("‚ùå Manual extraction also failed");
            return null;

        } catch (Exception e) {
            System.err.println("‚ùå Manual extraction error: " + e.getMessage());
            return null;
        }
    }

    /**
     * Updates token with user information
     * @param token Token to update
     * @param userInfoResponse JSON response from userinfo endpoint
     * @return Updated token
     */
    public OAuthToken updateTokenWithUserInfo(OAuthToken token, String userInfoResponse) {
        if (token == null || userInfoResponse == null) {
            return token;
        }

        String userEmail = JsonUtils.extractValue(userInfoResponse, "email");
        String userName = JsonUtils.extractValue(userInfoResponse, "name");

        // Use email as name if name is not available
        if (userName == null || userName.isEmpty()) {
            userName = userEmail;
        }

        System.out.println("‚úÖ User info extracted!");
        System.out.println("üìß Email: '" + userEmail + "'");
        System.out.println("üë§ Name: '" + userName + "'");

        return new OAuthToken(
                token.getAccessToken(),
                token.getRefreshToken(),
                userEmail,
                userName
        );
    }

    /**
     * Gets the configuration directory path
     * @return Configuration directory path
     */
    public String getConfigDirectoryPath() {
        File configDir = new File(System.getProperty("user.home"), CONFIG_DIR_NAME);
        return configDir.getAbsolutePath();
    }
}